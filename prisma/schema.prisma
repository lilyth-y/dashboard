// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Authentication & User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  projects   ProjectMember[]
  createdTransactions Transaction[] @relation("CreatedBy")
  createdBudgets      Budget[]      @relation("CreatedBy")
  createdProjects     Project[]     @relation("CreatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER
}

// Financial Management
model Transaction {
  id          String            @id @default(cuid())
  amount      Float
  type        TransactionType
  category    TransactionCategory
  description String?
  date        DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  projectId   String?

  creator User     @relation("CreatedBy", fields: [createdBy], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@index([date])
  @@index([type])
  @@index([category])
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionCategory {
  // Income Categories
  SALES
  CONSULTING
  INVESTMENT
  OTHER_INCOME
  
  // Expense Categories
  OFFICE_SUPPLIES
  MARKETING
  SALARY
  RENT
  UTILITIES
  TRAVEL
  SOFTWARE
  EQUIPMENT
  TAX
  OTHER_EXPENSE
}

model Budget {
  id          String   @id @default(cuid())
  category    TransactionCategory
  amount      Float
  period      BudgetPeriod
  year        Int
  month       Int?     // null for yearly budgets
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String

  creator User @relation("CreatedBy", fields: [createdBy], references: [id])

  @@unique([category, period, year, month])
}

enum BudgetPeriod {
  MONTHLY
  YEARLY
}

model CashFlowProjection {
  id              String   @id @default(cuid())
  date            DateTime
  projectedIncome Float
  projectedExpense Float
  actualIncome    Float?
  actualExpense   Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date])
  @@index([date])
}

// Analytics & KPI Tracking
model KPIMetric {
  id        String    @id @default(cuid())
  name      String
  type      KPIType
  value     Float
  unit      String?   // %, $, count, etc.
  date      DateTime
  createdAt DateTime  @default(now())

  @@index([name, date])
  @@index([type, date])
}

enum KPIType {
  REVENUE_GROWTH
  PROFIT_MARGIN
  CASH_FLOW_RATIO
  BURN_RATE
  RUNWAY_MONTHS
  CUSTOMER_ACQUISITION_COST
  MONTHLY_RECURRING_REVENUE
  OPERATIONAL_EFFICIENCY
  ROI
  DEBT_TO_EQUITY
}

// Project Management
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String

  creator      User            @relation("CreatedBy", fields: [createdBy], references: [id])
  members      ProjectMember[]
  tasks        Task[]
  milestones   Milestone[]
  transactions Transaction[]
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

model ProjectMember {
  id        String            @id @default(cuid())
  userId    String
  projectId String
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

enum ProjectMemberRole {
  OWNER
  MANAGER
  MEMBER
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  projectId   String
  assignedTo  String?
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone Milestone?   @relation(fields: [milestoneId], references: [id])
  milestoneId String?

  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Milestone {
  id          String          @id @default(cuid())
  title       String
  description String?
  status      MilestoneStatus @default(PENDING)
  dueDate     DateTime
  projectId   String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@index([status])
  @@index([dueDate])
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}